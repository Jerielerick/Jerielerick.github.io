const express = require('express');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt'); // Agrega la biblioteca bcrypt
const saltRounds = 10; // Número de rounds para el algoritmo de hash
const sha1 = require('sha1');
const https = require ('https');
const fs =require ('fs')//para
const app = express();

app.use(bodyParser.urlencoded({ extended: true }));



class Server {
    constructor() {
        this.app = express();
        this.port = process.env.PORT;

        this.middlewares();
        this.routes();
    }
    //creatServer (){
      //  https.creatServer( {
        //    key: fs.readFileSync(key.pem),
          //  cert: fs.readFileSync(cert.pem)
//        }, this.app).listen(this.port,()=>{
  //          console.log("https://127.0.0.1;" + this.port);
    //    });
      //  }
        

    middlewares() {
        this.app.use(express.static('public'));
        this.app.set('view engine', 'ejs');
        this.app.use(cookieParser());
        this.app.use(session({
            secret: "amar",
            saveUninitialized: true,
            resave: true
        }));
    }

    validarYLimpiarDato(dato, tipo) {
        // Implementa la lógica de validación y limpieza según tus requisitos
    
            // Verificar si el dato es undefined o null
            if (dato === undefined || dato === null) {
                return ''; // Otra opción podría ser devolver un valor predeterminado o lanzar una excepción
            }
            
            // Limpieza básica para prevenir ataques XSS
            dato = dato.toString().trim();
    
            // Validación según el tipo de dato
            switch (tipo) {
                case 'int':
                    // Validar que sea un número entero
                    dato = parseInt(dato, 10) || 0;
                    break;
                case 'varchar':
                    // Validar que sea una cadena de caracteres
                    dato = dato.substring(0, 255); // Limitar la longitud a 255 caracteres
                    break;
                case 'password':
                    // Validar que tenga al menos 8 caracteres y al menos un número
                    if (dato.length < 8 || !/\d/.test(dato)) {
                        // Puedes manejar el error de alguna manera, lanzar una excepción o devolver un valor predeterminado
                        dato = ''; // En este caso, se asigna una cadena vacía
                    }
                    break;
                case 'email':
                    // Validar que sea un formato de correo electrónico
                    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(dato)) {
                        dato = ''; // En este caso, se asigna una cadena vacía
                    }
                    break;
                case 'phone':
                    // Validar que sea un número de teléfono celular con lada
                    dato = dato.replace(/[^\d]/g, ''); // Eliminar caracteres no numéricos
                    if (!/^\d{10,15}$/.test(dato)) {
                        dato = ''; // En este caso, se asigna una cadena vacía
                    }
                    break;
                default:
                    // Tipo desconocido, devolver valor predeterminado o manejar el error de alguna manera
                    dato = '';
                    break;
            }
        
        return dato;
    }

    routes() {
        this.app.get('/quinielasfrm', (req, res) => {
            if (res.session.user) {
                res.render("quinielas" , req.session.user.nam);
            } else {
                res.send("NO has inisado secion");
            }
        });
        this.app.get('/hola', (req, res) => {
            if (res.session.user) {
                res.send("iniciasre secion " + req.session.user.nam);
            } else {
                res.send("NO has inisado secion");
            }
        });


        this.app.get('/login', (req, res) => {
            const email = req.query.email;
            let plainPassword = req.query.password;
            plainPassword = sha1(plainPassword);
            
            let mysql=require('mysql');
            // conexión bd
            const con = mysql.createConnection({
                host: "localhost",
                user: "root",
                password: "",
                database: "appweb"
            });
        
            con.connect((err) => {
                if (err) {
                    console.error("Error al conectar a la base de datos: ", err);
                    res.status(500).send("Error interno del servidor");
                    return;
                }
        
                console.log("¡Conectado a la base de datos!");
                const sql = "SELECT * FROM ialumnos WHERE email = ?";
        
                con.query(sql, [email], (err, result) => {
                    if (err) {
                        console.error("Error en la consulta: ", err);
                        res.status(500).send("Error interno del servidor");
                        return;
                    }
        
                    if (result.length > 0) {
                        // Usuario encontrado, ahora comparamos las contraseñas
                        const hashedPassword = result[0].password;
        
                        bcrypt.compare(plainPassword, hashedPassword, (err, passwordMatch) => {
                            if (passwordMatch) {
                                // Inicio de sesión exitoso
                                console.log("Inicio de sesión exitoso");
                                const user = {
                                    name: email,
                                    rol: result[0].rol
                                };
                                req.session.user = user;
                                req.session.save();
                                res.render("quinielas", { user: user });
                            } else {
                                // Contraseña incorrecta
                                res.status(401).send("Credenciales incorrectas");
                            }
                        });
                    } else {
                        // Usuario no encontrado
                        res.status(401).send("Credenciales incorrectas");
                    }
        
                    // Cierra la conexión después de realizar la consulta
                    con.end();
                });
            });
        });
        
        this.app.get("/registrarFrm",(req, res) =>{
            if (req,session.user)
            {
                if (req.session.rol == 'admin')
                {
                    res.render('registrar',{user: req.session.user});
                }
            }
        });

        this.app.get('/registrardo', (req, res) => {
            let idStudent = req.query.idStudent;
            let firstname = req.query.firstname;
            let lname = req.query.lname;
            let lastname = req.query.lastname;
            let age = req.query.age;
            let country = req.query.country;
            let plainPassword = req.query.password; // Contraseña sin encriptar
            let email = req.query.email;
            let phone = req.query.phone;

            // Generar un salt y luego utilizarlo para hashear la contraseña
            bcrypt.genSalt(saltRounds, (err, salt) => {
                bcrypt.hash(plainPassword, salt, (err, hashedPassword) => {
                    if (err) throw err;

                    let mysql = require('mysql');

                    let con = mysql.createConnection({
                        host: "localhost",
                        user: "root",
                        password: "",
                        database: "appweb"
                    });

                    con.connect((err) => {
                        if (err) throw err;
                        console.log("Connected!");

                        let sql = "INSERT INTO ialumnos (`firstname`, `lastname`, `edad`, `country`, `password`, `email`, `phone`) VALUES ('" + firstname + "','" + lastname + "', " + age + " , '" + country + "','" + hashedPassword + "','" + email + "','" + phone + "')";

                        con.query(sql, (err, result) => {
                            if (err) throw err;

                            console.log("1 record inserted");

                            // Obtener el idStudent del resultado de la inserción
                            let insertedId = result.insertId;

                            res.render('registrado', {
                                idStudent: insertedId,
                                Nombre: firstname,
                                country: country
                            });
                        });
                    });
                });
            });
        });

        


        this.app.get('/actualizado', (req, res) => {
            let idStudent = req.query.idStudent;
            let firstname = req.query.firstname;
            let lastname = req.query.lastname;
            let country = req.query.country;
            let password = req.query.password;
            let email = req.query.email;
            let phone = req.query.phone;

            let mysql = require('mysql');

            let con = mysql.createConnection({
                host: "localhost",
                user: "root",
                password: "",
                database: "appweb"
            });

            con.connect((err) => {
                if (err) throw err;
                console.log("Connected!");

                let sql = "UPDATE ialumnos SET password  = '" + password + "' WHERE idStudent =" + idStudent + " AND firstname = '" + firstname + "' ";
                //UPDATE `ialumnos` SET `password` =     'lenel nuevo' WHERE `ialumnos`.`idStudent` = 21;
                con.query(sql, (err, result) => {
                    if (err) throw err;

                    console.log("1 record inserted");

                    // Obtener el idStudent del resultado de la inserción
                    let insertedId = result.insertId;

                    res.render('actualizado', {
                        idStudent: idStudent,
                        Nombre: firstname,
                        country: country
                    });
                });
            });
        });


        this.app.get('/consultar', (req, res) => {
            if (req.session.user)
            {
                if (req.session.user.rol == 'admin')
                {
                    let mysql = require('mysql');

                    let con = mysql.createConnection({
                        host: "localhost",
                        user: "root",
                        password: "",
                        database: "appweb"
                    });

                    con.connect((err) => {
                        if (err) throw err;
                        console.log("¡Conectado a la base de datos!");
                        let sql = "SELECT * FROM ialumnos ";

                        con.query(sql, (err, result) => {
                            if (err) throw err;
                            console.log(result);
                            res.render("consultar", { ialumnos: result });
                        });
                    });
                }
                else
                {
                    res.send("No eres admin");
                }
            } 
            else{
                res.send("No has iniciado session");
            }  
        });
    }
    listen() {
        this.app.listen(this.port, () => {
            console.log("http://127.0.0.1:" + this.port);
        });
    }
}

module.exports = Server;
